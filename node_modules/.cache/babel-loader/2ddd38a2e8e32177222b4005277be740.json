{"ast":null,"code":"var _jsxFileName = \"/Users/dungviet/Turtorial/ReactJs/reactquery-learning/src/components/Planets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Planet from \"./Planet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fetchPlanets = async page => {\n  const res = await fetch(`https://swapi.dev/api/planets/${page}`, {\n    method: \"GET\"\n  });\n  return res.json();\n};\n\nconst Planets = () => {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const {\n    data,\n    status\n  } = useQuery([\"planets\", page], () => fetchPlanets(page));\n  console.log(data, status);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Planets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), status === \"error\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 30\n    }, this), status === \"loading\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 32\n    }, this), status === \"success\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: data.results.map(item => {\n          return /*#__PURE__*/_jsxDEV(Planet, {\n            planet: item\n          }, item.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n};\n\n_s(Planets, \"ZYsXg3t7O7WSb8i4Sm6UkoiuraU=\", false, function () {\n  return [useQuery];\n});\n\n_c = Planets;\nexport default Planets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"sources":["/Users/dungviet/Turtorial/ReactJs/reactquery-learning/src/components/Planets.js"],"names":["React","useEffect","useState","useQuery","Planet","fetchPlanets","page","res","fetch","method","json","Planets","setPage","data","status","console","log","results","map","item","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAEA,MAAMC,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnC,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,iCAAgCF,IAAK,EAAvC,EAA0C;AAC/DG,IAAAA,MAAM,EAAE;AADuD,GAA1C,CAAvB;AAGA,SAAOF,GAAG,CAACG,IAAJ,EAAP;AACD,CALD;;AAOA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACL,IAAD,EAAOM,OAAP,IAAkBV,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM;AAAEW,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBX,QAAQ,CAAC,CAAC,SAAD,EAAYG,IAAZ,CAAD,EAAoB,MACnDD,YAAY,CAACC,IAAD,CADmB,CAAjC;AAGAS,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBC,MAAlB;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGA,MAAM,KAAK,OAAX,iBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFzB,EAGGA,MAAM,KAAK,SAAX,iBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAH3B,EAIGA,MAAM,KAAK,SAAX,iBACC;AAAA,6BACE;AAAA,kBACGD,IAAI,CAACI,OAAL,CAAaC,GAAb,CAAkBC,IAAD,IAAU;AAC1B,8BAAO,QAAC,MAAD;AAAwB,YAAA,MAAM,EAAEA;AAAhC,aAAaA,IAAI,CAACC,IAAlB;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,SAFA;AADH;AAAA;AAAA;AAAA;AAAA;AADF,qBALJ;AAAA,kBADF;AAgBD,CAvBD;;GAAMT,O;UAEqBR,Q;;;KAFrBQ,O;AAyBN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Planet from \"./Planet\";\n\nconst fetchPlanets = async (page) => {\n  const res = await fetch(`https://swapi.dev/api/planets/${page}`, {\n    method: \"GET\",\n  });\n  return res.json();\n};\n\nconst Planets = () => {\n  const [page, setPage] = useState(1);\n  const { data, status } = useQuery([\"planets\", page], () =>\n    fetchPlanets(page)\n  );\n  console.log(data, status);\n\n  return (\n    <>\n      <div>Planets</div>\n      {status === \"error\" && <div>Error fetching data</div>}\n      {status === \"loading\" && <div>Loading data...</div>}\n      {status === \"success\" && (\n        <>\n          <div>\n            {data.results.map((item) => {\n              return <Planet key={item.name} planet={item} />;\n            })}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Planets;\n"]},"metadata":{},"sourceType":"module"}