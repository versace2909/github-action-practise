{"ast":null,"code":"var _jsxFileName = \"/Users/dungviet/Turtorial/ReactJs/reactquery-learning/src/components/Planets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Planet from \"./Planet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fetchPlanets = async () => {\n  const res = await fetch(\"http://localhost:3000/tasks\", {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.json();\n};\n\nconst Planets = () => {\n  _s();\n\n  const [count, setCount] = useState(1);\n  const {\n    data,\n    status\n  } = useQuery([\"planets\"], () => fetchPlanets(), {// staleTime: 10000,\n    // cacheTime: 0,\n  });\n  console.log(data, status);\n\n  const cliclicklick = () => {\n    setCount(prevCount => prevCount + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => cliclicklick(),\n      children: [\"XXX \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Planets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), status === \"error\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Error fetching data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 30\n    }, this), status === \"loading\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 32\n    }, this), status === \"success\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.map(item => {\n        // return <Planet key={item.name} planet={item} />;\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: item.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Planets, \"Z+HAgmTgozcDOmS+HCvdpXKDBWs=\", false, function () {\n  return [useQuery];\n});\n\n_c = Planets;\nexport default Planets;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planets\");","map":{"version":3,"sources":["/Users/dungviet/Turtorial/ReactJs/reactquery-learning/src/components/Planets.js"],"names":["React","useEffect","useState","useQuery","Planet","fetchPlanets","res","fetch","mode","headers","json","Planets","count","setCount","data","status","console","log","cliclicklick","prevCount","map","item","title","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;;AAEA,MAAMC,YAAY,GAAG,YAAY;AAC/B,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AACrDC,IAAAA,IAAI,EAAE,MAD+C;AAErDC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAF4C,GAAhC,CAAvB;AAMA,SAAOH,GAAG,CAACI,IAAJ,EAAP;AACD,CARD;;AAUA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAEY,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBZ,QAAQ,CAAC,CAAC,SAAD,CAAD,EAAc,MAAME,YAAY,EAAhC,EAAoC,CACnE;AACA;AAFmE,GAApC,CAAjC;AAIAW,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkBC,MAAlB;;AACA,QAAMG,YAAY,GAAG,MAAM;AACzBL,IAAAA,QAAQ,CAAEM,SAAD,IAAeA,SAAS,GAAG,CAA5B,CAAR;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAQ,MAAA,OAAO,EAAE,MAAMD,YAAY,EAAnC;AAAA,yBAA4CN,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGG,MAAM,KAAK,OAAX,iBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHzB,EAIGA,MAAM,KAAK,SAAX,iBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJ3B,EAKGA,MAAM,KAAK,SAAX,iBACC;AAAA,gBACGD,IAAI,CAACM,GAAL,CAAUC,IAAD,IAAU;AAClB;AACA,4BACE;AAAA,kCACE;AAAA,sBAAIA,IAAI,CAACC;AAAT;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAID,IAAI,CAACE;AAAT;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAA,sBAAIF,IAAI,CAACN;AAAT;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA,wBADF;AAOD,OATA;AADH;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADF;AAsBD,CAjCD;;GAAMJ,O;UAEqBR,Q;;;KAFrBQ,O;AAmCN,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"react-query\";\nimport Planet from \"./Planet\";\n\nconst fetchPlanets = async () => {\n  const res = await fetch(\"http://localhost:3000/tasks\", {\n    mode: \"cors\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return res.json();\n};\n\nconst Planets = () => {\n  const [count, setCount] = useState(1);\n  const { data, status } = useQuery([\"planets\"], () => fetchPlanets(), {\n    // staleTime: 10000,\n    // cacheTime: 0,\n  });\n  console.log(data, status);\n  const cliclicklick = () => {\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  return (\n    <>\n      <button onClick={() => cliclicklick()}>XXX {count}</button>\n      <div>Planets</div>\n      {status === \"error\" && <div>Error fetching data</div>}\n      {status === \"loading\" && <div>Loading data...</div>}\n      {status === \"success\" && (\n        <div>\n          {data.map((item) => {\n            // return <Planet key={item.name} planet={item} />;\n            return (\n              <>\n                <p>{item.title}</p>\n                <p>{item.description}</p>\n                <p>{item.status}</p>\n              </>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Planets;\n"]},"metadata":{},"sourceType":"module"}